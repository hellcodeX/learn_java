package com.vlad.maven;

public class MavenNotes {
    /*  В java мы можем собрать наш проект в один файл, который будет иметь расширение .jar. С ним программа
    * может выполняться на другом компьютере. В джаве существуют 2 расширения:
        * jar(Java ARchive) для обычных приложений
        * war(Web Application ARchive) для веб-приложений
        *
    *   Управление зависимости может быть сложным в больших проектах, когда подключаются множество сторонних библиотек.
    * В таких случаях ими становиться сложно управлять. Если например в проекте 100 зависимостей, будет
    * сложно искать каждую зависимость вручную, и добавлять ее в свой проект, тем более что зависимости
    * постоянно обновляются. Следить вручную за всем этим очень сложно. Поэтому был создан Maven.
    * Apache Maven занимается управлением зависимостями, созданием структуры проекта и сборкой.
    *
    *   Терминология:
    * Artifact - библиотека, готовый проект. Можно подключить к своему проекту.
    * Зависимость - сторонняя библиотека.
    * Apache Maven (с идиша собиратель знаний) - инструмент для сборки проекта и управления зависимостями.
    * Archetype - задают структуру проекта, подгружаются из репозитория мейвана. Можно загрузить
    *   свою структуру на репозиторий мейвана. Если не выбирать архетип, будет использоваться стандартная
    *   структура проекта.
    *
    *   Мы можем залить наш проект на репозиторий мейвана и он тоже станет артефактом, другие пользователи
    * смогут его загрузить и использовать в своих проектах.
    *
    *   Мейвен проект имеет определенную структуру: структуру папок, структуру файлов. Также в нем есть
    * POM файл, где прописываются зависимости которые мейвен будет автоматически брать из интернета
    * и подключать к нашему проекту, а так же конфигурация сборки необходимая для сборки проекта в jar
    * или war файл.
    *   До этого мы не собирали наш проект, мы его компилировали и запускали.
    *
    *   Во время создания проекта нужно указать GroupId и ArtifactId. GroupId подчиняется тем же конвенциям,
    * что и названия пакетов, (например: maven.example.com) желательно должно быть уникальным и что-то значить.
    * Наш код будет лежать по этому пути. ArtifactId - название нашего артефакта(проекта).
    *
    *   В стандартной структуре проекта есть папка src в которой лежит папка main. Тут в папке java должны
    * быть классы нашего проекта, а также в папке resources должны лежать статические ресурсы - текстовые
    * файлы, javascript, html, css файлы (вся статика которая не является java кодом).
    *   В папке test должны быть тестовые файлы (JUnit, модульные тесты).
    *   Стандартная структура проекта позволяет нам легко собирать проект в jar файл. Без структуры
    * пришлось бы вручную скомпилировать классы, и объединить их в jar файл.
    *
    * Подключение зависимости JUnit:
    *   Если подключать вручную, пришлось бы в интернете найти jar файл с библиотекой JUnit, скачать и
    * сохранить в External Libraries.
    *   Чтобы подключить зависимость в мейвен проекте нужно в pom.xml (после тега <version>) прописать
    * эту зависимость. Написать ее нужно в соответствии с некоторой структурой. Посмотреть ее можно
    * на сайте https://mvnrepository.com/ (maven repository). Здесь можно найти любой артефакт который
    * есть в репозитории мейвена. Найдя нужный артефакт можно нажать на версию и посмотреть код который
    * нужно прописать в pom файле. Прописывать его нужно в теге
    *   <dependencies> код зависимостей </dependencies>. После этого среда должна предложить импортировать
    * изменения чтобы мейвен просмотрел pom файл и скачал все зависимости которые в нем указаны. Новые
    * подключенные зависимости появятся во вкладке External Libraries.
    *   В теге <scope> указано к какой области нашего проекта относится зависимость. JUnit относится
    * к тестовому окружению (папке test), поэтому в папке java например, мы не будем использовать эту
    * зависимость и здесь ее использовать не выйдет. */
}
